// Authentication System Schema for 1001 Stories
// Simplified version focused on core authentication features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// AUTHENTICATION MODELS
// ==========================================

// User roles enum
enum UserRole {
  LEARNER    // Regular users (can use Google OAuth, Email)
  VOLUNTEER  // Content contributors (can use password login)
  ADMIN      // System administrators (password login only)
}

// Main User model
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  password        String?          // For admin/volunteer password login
  role            UserRole         @default(LEARNER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Security fields
  lastLoginAt     DateTime?
  loginAttempts   Int              @default(0)
  lockedUntil     DateTime?
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  activityLogs    ActivityLog[]
  
  @@map("users")
}

// OAuth Account model (for Google, GitHub, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model (for database sessions)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Enhanced session tracking
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent") @db.Text
  lastAccessed DateTime @default(now()) @map("last_accessed")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Email verification token model
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==========================================
// SECURITY & AUDIT MODELS
// ==========================================

// Security audit logging
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  action    String   // LOGIN_SUCCESS, LOGIN_FAILED, REGISTRATION, etc.
  resource  String   // What was accessed/modified
  result    String   // SUCCESS, FAILURE, BLOCKED
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent") @db.Text
  metadata  Json?    // Additional context data
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

// Rate limiting tracking (optional - can use Redis instead)
model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or user identifier
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([key])
  @@index([resetTime])
  @@map("rate_limits")
}
